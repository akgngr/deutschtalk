rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isParticipant(matchId) {
      let matchDoc = get(/databases/$(database)/documents/matches/$(matchId));
      // Ensure matchDoc and participants exist before checking 'in'
      return isSignedIn() && matchDoc.data != null && matchDoc.data.participants != null && request.auth.uid in matchDoc.data.participants;
    }

    // User profiles
    // - Authenticated users can read any user profile (for display names, photos for chat partners).
    // - Users can create and update their own profile. Profile creation is typically handled by server actions during sign-up.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId);
    }

    // Matchmaking queue
    // - Users can read, create, or delete their own entry in the queue.
    match /matchmakingQueue/{userId} {
      allow read, create, delete: if isOwner(userId);
    }

    // Matches
    // - Participants can read the match document.
    // - Participants can update the match document (e.g., for lastMessage, status via server actions using client auth).
    //   Server actions are responsible for validating which specific fields can be changed.
    // - Match creation is handled by server actions, so no client-side create rule is needed here.
    match /matches/{matchId} {
      allow read, update: if isParticipant(matchId);
    }

    // Messages within a match
    // - Participants can read messages.
    // - Participants can create messages for their match.
    // - AI-related fields (isGerman, correction, explanation) and moderation fields can be updated by participants
    //   (specifically, by server actions like 'processAIMessage' or moderation logic acting on behalf of the user/system).
    match /matches/{matchId}/messages/{messageId} {
      allow read: if isParticipant(matchId);
      allow create: if isParticipant(matchId) &&
                       isOwner(request.resource.data.senderId) &&
                       request.resource.data.text is string && 
                       request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1025 && // Text length validation
                       request.resource.data.timestamp == request.time && // Enforce server timestamp for creation
                       // Check for required fields
                       request.resource.data.containsKey('matchId') && request.resource.data.matchId == matchId &&
                       request.resource.data.containsKey('senderId') && request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.containsKey('senderDisplayName') && (request.resource.data.senderDisplayName is string || request.resource.data.senderDisplayName == null) &&
                       request.resource.data.containsKey('text') &&
                       request.resource.data.containsKey('timestamp') &&
                       request.resource.data.containsKey('isModerated') && request.resource.data.isModerated is bool &&
                       // Allow only known fields from ChatMessage type
                       request.resource.data.keys().hasOnly([
                         'matchId', 'senderId', 'senderDisplayName', 'senderPhotoURL',
                         'text', 'timestamp', 'isModerated', 'isGerman', 'correction', 'explanation', 'aiProcessingError', 'moderationReason'
                       ]);

      allow update: if isParticipant(matchId) &&
                       // Allow updates only to AI-related or moderation fields by server actions using client auth.
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'isGerman', 'correction', 'explanation', 'aiProcessingError', 'isModerated', 'moderationReason'
                       ]);
    }
  }
}
